==Summary==
The purpose of this documment is to help to providing a guide to start mitigating brute force password spray attacks when disabling romt the root in your company cannot be done, because this may affect some users or applications that work with legacy clients.

This granularity allows start applying changes to specific groups or users based on their attributes.

==Part I. Query your users in Active Directory==


'''Active Directory'''


The attribute we will use is the department name as it is one of the most common attributes used to tag users depending on their department and roles.



The following link shows all Active Directory user extended properties:

https://social.technet.microsoft.com/wiki/contents/articles/12037.active-directory-get-aduser-default-and-extended-properties.aspx



There are other ways to disable legacy authentication in Active Directory using GPOs if needed. For example, this one was applied to Win10 Computers disabling legacy authentication:

<code>“Blocking basic authentication at the OS level for Windows 10 computers by setting Allow basic authentication to disabled in the GPO Computer Configuration\Policies\Administrative Templates\Windows Components\Windows Remote Management (WinRM)\WinRM Service.”</code>


In this part, we will query Active Directory users and Groups, to determine what attributes users have and which one we want to use to filter in Exchange Online service.


'''Get a list of all your AD Groups''' 


*In your AD server, open PowerShell as an Administrator. (right click, select Run as administrator)

 <code>Get-ADGroup -filter * | select -Property name</code>

*You can also export the outputs to a text file.

<code>Get-ADGroup -filter * | select -Property name | Out-File C:\Users\textfile.txt</code>


'''Get the members of a group'''


*Now that we have all our groups, we can query which users belong to those groups and create a list based on any of their attributes. I recommend using attribute <span style="color: blue;">ObjectGuid</span> as this value is unique for each user.

<code>Get-ADGroupMember -Identity <span style="color: red;"><groupname></span> | select -Property <span style="color: blue;">ObjectGuid</span></code>


'''Set or get attributes.'''


*Now we want to find or set, one specific attribute that will be Synced with Exchange Online to filter users based on this attribute.
This will help us to disable legacy protocols for specific groups, and make sure that production will not be affected to the entire company.


'''*If your company have OUs and GPs applied to set this attribute, you may not need to do this, but you can query all the users to confirm that these attributes have been applied already or not. If there are no policies set for this, it may be a good time to set them.'''


*These commands set the attribute <span style="color: blue;">“department”</span> as <span style="color: red;">“developer”,</span> for users that belong to a group named <span style="color: orange;">“developer”,</span> obtained in the previous steps.

<code><span style="color: red;">$variable1</span> = Get-ADGroupMember -Identity "<groupname>" | select -expandproperty "objectGUID"</code>

<code>Foreach (<span style="color: red;">$user</span> in <span style="color: red;">$variable1</span>) {set-ADUser -identity <span style="color: red;">$user</span>.ToString()  -Add @{department="<department_name>"}}</code>


*Query your users to make sure attribute was applied or if they already have it.

<code>Get-ADUser -filter {(department -eq <span style="color: red;">'<department_name>'</span>)} -Properties Department</code>


*This command returns the ObjectGuid, name or all properties for all users based on the previous conditions, in case this is needed to create a list of these users

<code>Get-ADUser -filter {(department -eq <span style="color: red;">'<department_name>'</span>)} -Properties department | select -Property objectguid</code>

<code>Get-ADUser -filter {(department -eq <span style="color: red;">'<department_name>'</span>)} -Properties department | select -Property name</code>

<code>Get-ADUser -filter {(department -eq <span style="color: red;">'<department_name>'</span>)} -Properties department | select -Property *</code>


Once this is completed, and you have determined which groups you want to start disabling legacy for, we can continue with the next steps.

==Part II. Disabling legacy in EXO==


'''Before you continue, it is important to know that attributes for users that exist on-premises are Synced to Exchange Online, only when users have a valid Exchange License.'''


If you need to check this, we can run different queries in Exchange Online using PowerShell.


If you want to apply a license to any given user or group, you can go to '''https://portal.office.com > Billing > Subscriptions and select the license you want to enable for users.'''  


<code>'''Before continuing, please stop and read the document provided in the following link to understand how basic authentication works and get additional details.'''</code> 


The following instructions are all based on Microsoft official documentation found on this link:

https://docs.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/disable-basic-authentication-in-exchange-online


I am including additional information and fully working commands to make this task easier to complete.


*Connecting to Exchange Online with PowerShell

<span style="color: green;"><nowiki>#</nowiki>require all PowerShell scripts that you download from the internet are signed by a trusted publisher</span>

<code>Set-ExecutionPolicy RemoteSigned</code>


*get credentials to connect to Exchange Online

<code><span style="color: red;">$UserCredential</span> = Get-Credential</code>

<code><span style="color: red;">$Session</span> = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri <nowiki>https://outlook.office365.com/powershell-liveid/</nowiki> -Credential $UserCredential -Authentication Basic -AllowRedirection</code>

<code>Import-PSSession $Session -DisableNameChecking</code>


<span style="color: lightblue;">If you don't receive any errors, you connected successfully.</span>


Quick test is to run an Exchange Online cmdlet, for example, Get-Mailbox, and see the results. If no error is returned, you connected successfully.


'''Let’s run some queries. We can determine if users have email client enabled by filtering by department.'''


We can also see all their attributes that are Synced to Exchange Online.


*Get a full list of users with mailbox enabled:

<code>Get-User -filter {(RecipientType -eq 'UserMailbox')}</code>


*Get users with mail client enabled and from a specific department'''

<code>Get-User -Filter {(RecipientType -eq 'UserMailbox') -and (Department -like <span style="color: red;">'<department_name>'</span>)}</code>


'''(The attribute “department” was verified or set in Part I )'''


'''Create a policy to disable legacy authentication'''


To determine what protocols or services needs to be disabled on the policy, please check the document provided with a list of legacy clients and protocols used:

https://docs.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/disable-basic-authentication-in-exchange-online?redirectSourcePath=%252fen-ie%252farticle%252fDisable-Basic-authentication-in-Exchange-Online-bba2059a-7242-41d0-bb3f-baaf7ec1abd7#authentication-policy-procedures-in-exchange-online


*Create a policy to disable legacy

<code>New-AuthenticationPolicy -Name <span style="color: red;">'<policy_name>'</span></code>


*To get policy configuration:'''

<code>Get-AuthenticationPolicy -Identity <span style="color: red;">'<policy_name>'</span></code>


*To modify the settings of the policy

For detailed syntax and parameters information, see New-AuthenticationPolicy cmdlets.

<code>Set-AuthenticationPolicy -Identity <span style="color: red;">'<policy_name>'</span></code>


Parameters:

-AllowBasicAuthActiveSync: <span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthAutodiscover:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthImap:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthMapi:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthOfflineAddressBook:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthOutlookService:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthPop:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthPowershell:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthReportingWebServices:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthRest:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthRpc:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthSmtp:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>

-AllowBasicAuthWebServices:<span style="color: red;">$false</span> or <span style="color: red;">$true</span>  



*Apply the policy to all users in the same department'''


<code><span style="color: red;">$variable1</span> = Get-User -Filter {(RecipientType -eq 'UserMailbox') -and (Department -like <span style="color: red;">'<departmentname>'</span>)}</code>

<code><span style="color: red;">$variable2</span> = <span style="color: red;">$variable1</span>.windowsemailaddress</code>

<code><span style="color: red;">$variable2</span> | foreach {Set-User -Identity $_ -AuthenticationPolicy <span style="color: red;">'<policy_name>'</span>}</code>

​

*You can query user’s attributes to make sure policy was applied.

<code>Get-User -Filter {(RecipientType -eq 'UserMailbox') -and (Department -like <span style="color: red;">'<departmentname>'</span>)} | select -Property *</code>


The fundamental lesson I learned when working on this topic about the Filter parameter for on-premises Exchange Server: use the distinguished name (DN) of the object. Other unique values like Name, Alias, EmailAddress, etc. that ''should'' work don't.


So, run the command:

<code>Get-AuthenticationPolicy | Format-List Name,DistinguishedName</code>


And then use the DN value for the filter:


<code>Get-User -Filter {AuthenticationPolicy -eq '<DN of Disable Legacy auth policy>'}</code>


This will complete the steps to disable Basic Authentication for one specific group of users.


*If you need to delete a policy'''

<code>remove-AuthenticationPolicy -Identity <span style="color: red;"><PolicyIdentity></span></code>


*If you want to remove users for specific group from the policy:

<code>$variable1 = Get-User -Filter {(RecipientType -eq 'UserMailbox') -and (Department -like '<departmentname>'}</code>)

<code>$variable2 = $variable1.windowsemailaddress</code>

<code>$variable2 | foreach {Set-User -Identity $_ -AuthenticationPolicy "$null"</code>}


==Contact & Feedback==

If you have any question, concern or feedback, please send an email to ridia@microsoft.com or contact Azure Identity team.


References:


https://docs.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/disable-basic-authentication-in-exchange-online

https://docs.microsoft.com/en-us/powershell/module/exchange/organization/remove-authenticationpolicy?view=exchange-ps

https://blogs.technet.microsoft.com/exchange/2018/10/17/disabling-basic-authentication-in-exchange-online-public-preview-now-available/

https://docs.microsoft.com/en-us/powershell/module/exchange/organization/set-authenticationpolicy?view=exchange-ps

https://social.technet.microsoft.com/wiki/contents/articles/12037.active-directory-get-aduser-default-and-extended-properties.aspx

https://support.office.com/en-us/article/enable-or-disable-modern-authentication-in-exchange-online-58018196-f918-49cd-8238-56f57f38d662?ui=en-US&rs=en-US&ad=US
